return(NA)
} else if (p_value < 0.001) {
return("***")
} else if (p_value < 0.01) {
return("**")
} else if (p_value < 0.05) {
return("*")
} else {
return("")
}
}
# Function to format confidence intervals as a string
format_ci <- function(lower, upper) {
paste0("(", round(lower, 2), ", ", round(upper, 2), ")")
}
# Tidy the baseline model with confidence intervals
tidy_baseline <- tidy(baseline_model, conf.int = TRUE, exponentiate = TRUE)
# Tidy the enhanced model with confidence intervals
tidy_enhanced <- tidy(enhanced_model, conf.int = TRUE, exponentiate = TRUE)
# Tidy the interaction model with confidence intervals
tidy_interaction <- tidy(model_interaction, conf.int = TRUE, exponentiate = TRUE)
# Apply the function to each model's p.value
tidy_baseline$asterisks <- sapply(tidy_baseline$p.value, add_asterisks)
tidy_enhanced$asterisks <- sapply(tidy_enhanced$p.value, add_asterisks)
tidy_interaction$asterisks <- sapply(tidy_interaction$p.value, add_asterisks)
# Create OR strings with asterisks and format CIs as a string
tidy_baseline <- tidy_baseline %>%
mutate(
OR = ifelse(is.na(estimate), NA, paste0(round(estimate, 2), asterisks)),
CI = ifelse(is.na(conf.low) | is.na(conf.high), NA, format_ci(conf.low, conf.high))
)
tidy_enhanced <- tidy_enhanced %>%
mutate(
OR = ifelse(is.na(estimate), NA, paste0(round(estimate, 2), asterisks)),
CI = ifelse(is.na(conf.low) | is.na(conf.high), NA, format_ci(conf.low, conf.high))
)
tidy_interaction <- tidy_interaction %>%
mutate(
OR = ifelse(is.na(estimate), NA, paste0(round(estimate, 2), asterisks)),
CI = ifelse(is.na(conf.low) | is.na(conf.high), NA, format_ci(conf.low, conf.high))
)
# Add a 'Model' column to each tidied dataframe
tidy_baseline <- tidy_baseline %>% mutate(Model = "Model 1")
tidy_enhanced <- tidy_enhanced %>% mutate(Model = "Model 2")
tidy_interaction <- tidy_interaction %>% mutate(Model = "Model 3")
# Combine and pivot the dataframes
combined_results <- bind_rows(
tidy_baseline %>% select(term, OR, CI, Model),
tidy_enhanced %>% select(term, OR, CI, Model),
tidy_interaction %>% select(term, OR, CI, Model)
) %>%
pivot_wider(names_from = Model, values_from = c(OR, CI))
# Replace NAs with "—"
combined_results[is.na(combined_results)] <- "—"
# Reordering columns to have OR and CI next to each other for each model
combined_results <- combined_results %>%
select(term,
OR_Model_1, CI_Model_1,
OR_Model_2, CI_Model_2,
OR_Model_3, CI_Model_3)
# Reordering columns to have OR and CI next to each other for each model
combined_results <- combined_results %>%
select(term,
OR_Baseline, CI_Baseline,
OR_Enhanced, CI_Enhanced,
OR_Interaction, CI_Interaction)
# Reordering columns to have OR and CI next to each other for each model
combined_results <- combined_results %>%
select(term,
OR_Model_1, CI_Model_1,
OR_Model_2, CI_Model_2,
OR_Model_3, CI_Model_3)
combined_results
# Add a 'Model' column to each tidied dataframe
tidy_baseline <- tidy_baseline %>% mutate(Model = "Model_1")
tidy_enhanced <- tidy_enhanced %>% mutate(Model = "Model_2")
tidy_interaction <- tidy_interaction %>% mutate(Model = "Model_3")
# Combine and pivot the dataframes
combined_results <- bind_rows(
tidy_baseline %>% select(term, OR, CI, Model),
tidy_enhanced %>% select(term, OR, CI, Model),
tidy_interaction %>% select(term, OR, CI, Model)
) %>%
pivot_wider(names_from = Model, values_from = c(OR, CI))
# Replace NAs with "—"
combined_results[is.na(combined_results)] <- "—"
# Reordering columns to have OR and CI next to each other for each model
combined_results <- combined_results %>%
select(term,
OR_Model_1, CI_Model_1,
OR_Model_2, CI_Model_2,
OR_Model_3, CI_Model_3)
# Function to add significance asterisks
add_asterisks <- function(p_value) {
if (is.na(p_value)) {
return(NA)
} else if (p_value < 0.001) {
return("***")
} else if (p_value < 0.01) {
return("**")
} else if (p_value < 0.05) {
return("*")
} else {
return("")
}
}
# Function to format confidence intervals as a string
format_ci <- function(lower, upper) {
paste0("(", round(lower, 2), ", ", round(upper, 2), ")")
}
# Tidy the baseline model with confidence intervals
tidy_baseline <- tidy(baseline_model, conf.int = TRUE, exponentiate = TRUE)
# Tidy the enhanced model with confidence intervals
tidy_enhanced <- tidy(enhanced_model, conf.int = TRUE, exponentiate = TRUE)
# Tidy the interaction model with confidence intervals
tidy_interaction <- tidy(model_interaction, conf.int = TRUE, exponentiate = TRUE)
# Apply the function to each model's p.value
tidy_baseline$asterisks <- sapply(tidy_baseline$p.value, add_asterisks)
tidy_enhanced$asterisks <- sapply(tidy_enhanced$p.value, add_asterisks)
tidy_interaction$asterisks <- sapply(tidy_interaction$p.value, add_asterisks)
# Create OR strings with asterisks and format CIs as a string
tidy_baseline <- tidy_baseline %>%
mutate(
OR = ifelse(is.na(estimate), NA, paste0(round(estimate, 2), asterisks)),
CI = ifelse(is.na(conf.low) | is.na(conf.high), NA, format_ci(conf.low, conf.high))
)
tidy_enhanced <- tidy_enhanced %>%
mutate(
OR = ifelse(is.na(estimate), NA, paste0(round(estimate, 2), asterisks)),
CI = ifelse(is.na(conf.low) | is.na(conf.high), NA, format_ci(conf.low, conf.high))
)
tidy_interaction <- tidy_interaction %>%
mutate(
OR = ifelse(is.na(estimate), NA, paste0(round(estimate, 2), asterisks)),
CI = ifelse(is.na(conf.low) | is.na(conf.high), NA, format_ci(conf.low, conf.high))
)
# Add a 'Model' column to each tidied dataframe
tidy_baseline <- tidy_baseline %>% mutate(Model = "Model_1")
tidy_enhanced <- tidy_enhanced %>% mutate(Model = "Model_2")
tidy_interaction <- tidy_interaction %>% mutate(Model = "Model_3")
# Combine and pivot the dataframes
combined_results <- bind_rows(
tidy_baseline %>% select(term, OR, CI, Model),
tidy_enhanced %>% select(term, OR, CI, Model),
tidy_interaction %>% select(term, OR, CI, Model)
) %>%
pivot_wider(names_from = Model, values_from = c(OR, CI))
# Replace NAs with "—"
combined_results[is.na(combined_results)] <- "—"
# Reordering columns to have OR and CI next to each other for each model
combined_results <- combined_results %>%
select(term,
OR_Model_1, CI_Model_1,
OR_Model_2, CI_Model_2,
OR_Model_3, CI_Model_3)
# Print the final combined table
print(combined_results)
# For each model
roc_response_model_1 <- roc(imputed_df$child_marriage, fitted(baseline_model))
auc_model_1 <- auc(roc_response_model_1)
roc_response_model_2 <- roc(imputed_df$child_marriage, fitted(enhanced_model))
auc_model_2 <- auc(roc_response_model_2)
roc_response_model_3 <- roc(imputed_df$child_marriage, fitted(model_interaction))
auc_model_3 <- auc(roc_response_model_3)
# Compare AUC values
print(paste("AUC Model 1:", auc_model_1))
print(paste("AUC Model 2:", auc_model_2))
print(paste("AUC Model 3:", auc_model_3))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve: Logistic Model 1 (red) vs. Model 2 (blue) vs. Model 3 (green)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(enhanced_model)),
print.auc = T,
col = "blue",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(model_interaction)),
print.auc = T,
col = "green",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve: Logistic Model 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(enhanced_model)),
col = "green"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(model_interaction)),
print.auc = T,
col = "blue",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve: Logistic Model 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(enhanced_model)),
col = "green",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(model_interaction)),
print.auc = T,
col = "blue",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve: Logistic Model 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(enhanced_model)),
col = "green",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(model_interaction)),
print.auc = T,
col = "blue",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve: /nModel 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(enhanced_model)),
col = "green",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(model_interaction)),
print.auc = T,
col = "blue",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve: /n Model 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(enhanced_model)),
col = "green",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(model_interaction)),
print.auc = T,
col = "blue",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve:" "/nModel 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve:","/nModel 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve: Model 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(enhanced_model)),
col = "green",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(model_interaction)),
print.auc = T,
col = "blue",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(baseline_model)),
col = "red",
main = "ROC Curve: \nModel 1 (red) vs. Model 2 (green) vs. Model 3 (blue)"))
invisible(plot(roc(imputed_df$child_marriage,
fitted(enhanced_model)),
col = "green",
add = T))
invisible(plot(roc(imputed_df$child_marriage,
fitted(model_interaction)),
print.auc = T,
col = "blue",
add = T))
binnedplot(fitted(model_interaction),
residuals(model_interaction, type = "response"),
nclass = NULL,
xlab = "Expected Values",
ylab = "Average Residuals",
main = "Binned Residual Plot",
cex.pts = 1,
col.int = "gray")
?binnedplot
??binnedplot
install.packages("arm")
library(arm)
binnedplot(fitted(model_interaction),
residuals(model_interaction, type = "response"),
nclass = NULL,
xlab = "Expected Values",
ylab = "Average Residuals",
main = "Binned Residual Plot",
cex.pts = 1,
col.int = "gray")
# load packages
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(plotly)
library(reshape2)
library(car)
library(kableExtra)
library(broom)
library(knitr)
library(pROC)
library(ggpattern)
library(tidyr)
library(ResourceSelection)
library(sf)
library(arm)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
binnedplot(fitted(model_interaction),
residuals(model_interaction, type = "response"),
nclass = NULL,
xlab = "Expected Values",
ylab = "Average Residuals",
main = "Binned Residual Plot",
cex.pts = 1,
col.int = "gray")
# 1. Hosmer-Lemeshow Test for the Model 1
hoslem.test(baseline_model$y, fitted(baseline_model), g=10)
# 2. Hosmer-Lemeshow Test for the Model 2 (Baseline + Fixed Effects)
hoslem.test(enhanced_model$y, fitted(enhanced_model), g=10)
# 3. Hosmer-Lemeshow Test for the Model 3 (Baseline + Fixed Effects + Interaction Terms)
hoslem.test(model_interaction$y, fitted(model_interaction), g=10)
# VIFs check (A VIF value > 5 indicates high multicollinearity)
# Base model
model_1_vif <- vif(baseline_model)
print(model_1_vif)
# Enhanced model
model_2_vif <- vif(enhanced_model)
print(model_2_vif)
# Interacton model
model_3_vif <- vif(model_interaction)
print(model_3_vif)
# Calculate VIF (A VIF value > 5 indicates high multicollinearity)
FE_vif_results <- vif(enhanced_model)
print(FE_vif_results)
# Check if any VIF value is greater than a typical threshold, like 5.
FE_high_vif <- FE_vif_results[FE_vif_results > 5]
print(FE_high_vif)
# Adding the interaction term between ethnicity and access_to_media
model_interaction <- update(enhanced_model, . ~ . + ethnicity:access_to_media)
summary(model_interaction)
cat("AIC (Model 1):", AIC(baseline_model), "\nAIC (Model 2):", AIC(enhanced_model), "\n")
cat("BIC (Model 1):", BIC(baseline_model), "\nBIC (Model 2):", BIC(enhanced_model), "\n")
cat("AIC (Model 1):", AIC(baseline_model), "\nAIC (Model 3):", AIC(model_interaction), "\n")
cat("BIC (Model 1):", BIC(baseline_model), "\nBIC (Model 3):", BIC(model_interaction), "\n")
cat("AIC (Model 2):", AIC(enhanced_model), "\nAIC (Model 3):", AIC(model_interaction), "\n")
cat("BIC (Model 2):", BIC(enhanced_model), "\nBIC (Model 3):", BIC(model_interaction), "\n")
# Create a data frame to hold AIC and BIC values
aic_bic_comparison <- data.frame(
Model = c("Model 1", "Model 2", "Model 3"),
AIC = c(AIC(baseline_model), AIC(enhanced_model), AIC(model_interaction)),
BIC = c(BIC(baseline_model), BIC(enhanced_model), BIC(model_interaction))
)
# Print the table
print(aic_bic_comparison)
# No imputation -- Remove rows with any missing data from 'female_df'
og_df <- na.omit(married_df)
head(og_df)
# No imputation -- Remove rows with any missing data from 'female_df'
og_df <- na.omit(married_df)
summary(og_df)
# No imputation -- Remove rows with any missing data from 'female_df'
og_df <- na.omit(married_df)
print(og_df)
# Convert "age at first marriage" into a binary variable to indicate child marriage
# Child marriage is defined as marriage before the age of 18
# The new binary variable "child_marriage" will have a value of 1 if the marriage occurred before age 18, and 0 otherwise
og_df <- og_df %>%
mutate(child_marriage = ifelse(age_first_marriage < 18, 1, 0))
# Create a binary variable for child marriage under 16
# The new variable "child_marriage_u16" will have a value of 1 if the marriage occurred before age 16, and 0 otherwise
og_df <- og_df %>%
mutate(child_marriage_u16 = ifelse(age_first_marriage < 16, 1, 0))
# Move "child_marriage" and "child_marriage_u16" to the front of the dataframe
og_df <- og_df %>%
select(child_marriage, child_marriage_u16, everything())
# Move "child_marriage" and "child_marriage_u16" to the front of the dataframe
og_df <- og_df %>%
select(child_marriage, child_marriage_u16, everything())
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# load packages
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(plotly)
library(reshape2)
library(car)
library(kableExtra)
library(broom)
library(knitr)
library(pROC)
library(ggpattern)
library(tidyr)
library(ResourceSelection)
library(sf)
library(arm)
# import dataset
female <- read_csv("/Users/hollyduong/Desktop/DA 401/ChildMarriageInVietnam/Data/wm.csv")
# get a glimpse of dataset
head(female)
# Select the specified columns to create a new dataframe
female_df <- select(female, WAGEM, MSTATUS, HH6, HH7, welevel, insurance, ethnicity, windex5, CP2, HA1, MT4, MT9, MT11)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# load packages
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(plotly)
library(reshape2)
library(car)
library(kableExtra)
library(broom)
library(knitr)
library(pROC)
library(ggpattern)
library(tidyr)
library(ResourceSelection)
library(sf)
library(arm)
# import dataset
female <- read_csv("/Users/hollyduong/Desktop/DA 401/ChildMarriageInVietnam/Data/wm.csv")
# get a glimpse of dataset
head(female)
# Select the specified columns to create a new dataframe
female_df <- select(female, WAGEM, MSTATUS, HH6, HH7, welevel, insurance, ethnicity, windex5, CP2, HA1, MT4, MT9, MT11)
# import dataset
female <- read_csv("/Users/hollyduong/Desktop/DA 401/ChildMarriageInVietnam/Data/wm.csv")
# get a glimpse of dataset
print(female)
# get a glimpse of dataset
glimpse(female)
# get a glimpse of dataset
head(female)
# Select the specified columns to create a new dataframe
female_df <- select(female, WAGEM, MSTATUS, HH6, HH7, welevel, insurance, ethnicity, windex5, CP2, HA1, MT4, MT9, MT11)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# load packages
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(plotly)
library(reshape2)
library(car)
library(kableExtra)
library(broom)
library(knitr)
library(pROC)
library(ggpattern)
library(tidyr)
library(ResourceSelection)
library(sf)
library(arm)
# import dataset
female <- read_csv("/Users/hollyduong/Desktop/DA 401/ChildMarriageInVietnam/Data/wm.csv")
# get a glimpse of dataset
head(female)
# Select the specified columns to create a new dataframe
female_df <- select(female, WAGEM, MSTATUS, HH6, HH7, welevel, insurance, ethnicity, windex5, CP2, HA1, MT4, MT9, MT11)
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(plotly)
library(reshape2)
library(car)
library(kableExtra)
library(broom)
library(knitr)
library(pROC)
library(ggpattern)
library(tidyr)
library(ResourceSelection)
library(sf)
library(arm)
# import dataset
female <- read_csv("/Users/hollyduong/Desktop/DA 401/ChildMarriageInVietnam/Data/wm.csv")
# get a glimpse of dataset
head(female)
# Select the specified columns to create a new dataframe
female_df <- select(female, WAGEM, MSTATUS, HH6, HH7, welevel, insurance, ethnicity, windex5, CP2, HA1, MT4, MT9, MT11)
